
snippet :, "Object Value JS"
${1:key}: ${0:value},
endsnippet


snippet : "Object 'key': 'value'"
${1:'${2:key}'}: ${3:'${4:value}'}${5:,}${0}
endsnippet


snippet >> "arrow function"
($1) => {
  ${2:${VISUAL: }}$0
}
endsnippet


snippet if "if statement"
if (${1:${VISUAL}}$2) {
  $0
}
endsnippet


snippet else "else statement"
else {
  $0
}
endsnippet


snippet elif "else if statement"
else if (${1:${VISUAL}}$2) {
  $0
}
endsnippet


snippet tout "setTimeout function"
setTimeout(function() {
  ${VISUAL}$0
}${1:.bind(this)}, ${3:1000})
endsnippet


snippet req "require()"
require('$0')
endsnippet


snippet imp "import from"
import ${1:\{ $2 \}} from '$0'
endsnippet


snippet func "function ()"
function $1 ($2) {
  $0
}
endsnippet


snippet class "class"
class $1 ${2:extends $3} {
  ${4:constructor (${5}) \{
    $0
  \}}
}
endsnippet


snippet clog "console.log()"
console.log(${1:${VISUAL}})$0
endsnippet


snippet rco "react component"
const $1 = (${2:props}) => {
  ${3:state = \{$4\}
 }
  render () {
    return (
      $0
    )
  }
}
endsnippet


snippet rcl "react class"
export default class ${1:${VISUAL}} extends Component {
  constructor (${2:props}) {
    super()
    ${3:this.state = \{\}}
  }

  render () {
    return (
      <${4:div}>
        $0
      </$4>
    )
  }
}
endsnippet


snippet +++ "concat variable"
' + ${0} + '
endsnippet


snippet tca "try catch"
try {
  ${0}
} catch (err) {
  ${2:throw err}
}
endsnippet


snippet atca "async try catch"
async (${1}) => {
  try {
    ${0}
  } catch (err) {
    ${2:throw err}
  }
}
endsnippet
